DBS 1112 Practice Final Exam (Practical)

HOW TO READ THIS DOCUMENT

Lines beginning with ">" are example Terminal commands.  They should be typed into a Terminal window without the ">" before them.  Watch for "yourname", which you will substitute with your first initial followed by last full name.  For example, I would use "rosborne".  Example:

> git pull

Lines beginning with "***" are Answer lines.  They will have a section in square brackets that may contain a numeric range that your answer should fall into.  You must replace this range with your answer.  These answers are a graded part of the exam, so don't miss any of them!  Example:

*** Record Count: [ 15-25 ]

In the previous line, you would replace "15-25" with the number of records you got back, such as "17".

You will also see lines like the following:

SQL:

After each of these lines, paste your SQL that answers the previous question.  Make sure your SQL is formatted to be readable, with major clauses like SELECT, FROM, and WHERE on their own lines, and not just one giant block of code.  Part of your grade for each question is based on legibility.


PREPARATION

1. Create a new branch with your name in Git:

> git branch -t yourname

2. Switch into your new branch:

> git checkout yourname

3. Verify that you are in your own branch:

> git branch

This should produce the following output:

   master
*  yourname

Make sure the asterisk is beside your name.

4. Save a copy of this exam as "yourname.txt" in the same folder.  Make sure it is still plain text -- not RTF, not HTML, not DOC.  Just plain text.  Failure to do so will result in a zero for the final.

5. Add this new text file to Git:

> git add yourname.txt

6. Commit your changes:

> git commit -m 'Starting exam'

7. Push this file once to show the Instructor that you have started the exam:

> git push origin yourname


DURING THE EXAM

You must add the one test file and commit after each question, and the commit message must state which question you have just answered.  For example:

> git add yourname.txt ; git commit -m 'Question 1'

Failing to commit after each question or use meaningful commit messages will result in a lowered grade, as 10% of your grade on this exam is regular, meaningful commits.

While you will commit often, you MUST NOT push until given permission by the Instructor.


ONE LAST THING

Close this exam-msa.txt file and open your yourname.txt file.  All changes must be done in that file, not this one.  Changes to the exam-msa.txt file will result in a grade penalty.

Back?  Good.  Now remove all these instructions from your file and begin the exam.


EXAM

*** Name: [   ]


PART I: Import

With the exam you have been given files named exam-msa.sql, exam-msa.csv, and exam-msa.pdf.

1. Use Sequel Pro to create a new database named "dbs1112PF".

2. Switch to your new "dbs1112PF" database.

3. Import the exam-msa.sql file.  This will create a table named "msa_raw", as well as a number of other tables that start with "msa_".

4. Import the exam-msa.csv file into your new "msa_raw" table.

*** Record count of "msa_raw" table: [ 300000-310000 ]

This data set comes from the USA's Bureau of Labor Statistics' Occupational Employment Statistics package.  It breaks down jobs and pay rates for each year by Metropolitan Statistical Areas, grouping cities in a single region together into an MSA to allow for easier reporting.  You're going to do some analysis of the data, but first you need to normalize it properly -- which requires proper keying and indexing.

PART II: Keys and Indexes

1. Some of the lookup tables use surrogate keys with typical "id" columns: "msa_jobs" and "msa_areas".  Use ALTER TABLE statements to add primary keys to each of these tables and paste the SQL below.  If you don't remember the ALTER TABLE syntax from your homework, look it up in the mySQL Help in Sequel Pro.

SQL: (2 statements)


2. One of the lookup tables uses a simple, natural key: "msa_states".  Use an ALTER TABLE statement to add a primary keys to this table.

SQL:


3. The facts table, "msa_facts", uses a composite key.  Refer to the entity diagram and use an ALTER TABLE statements to add a primary key to this table.

SQL:


4. Refer to the entity diagram and use ALTER TABLE statements to add all of the required foreign key constraints.  You should end up with 3 foreign keys.  Remember to set all foreign keys to cascade.

SQL:  (3 statements)


5. You should also create a few unique indexes to make sure no data is duplicated.  Write ALTER TABLE or CREATE UNIQUE INDEX statements to add a unique index to each Name column in the "msa_jobs" and "msa_areas" tables.

SQL:  (2 statements)



PART III: Normalization

Your goal for this section is to split the data from the "msa_raw" table into the supporting tables.

Keep an eye out for errors as you import -- the unique indexes and primary keys you created will prevent you from inserting duplicate records, so your SELECT queries will need to ensure that each record is unique.

1. Use an INSERT-SELECT statement to populate the "msa_states" table.  Make sure you don't insert any NULL or blank records!

*** Count of records in "msa_states": [ 40-60 ]
SQL:


2. Do the same for "msa_areas".  Be sure to include the State.

*** Count of records in "msa_areas": [ 300-500 ]
SQL:


3. Do the same for "msa_jobs".  Be sure to include the Level.

*** Count of records in "msa_jobs": [ 800-850 ]
SQL:


4. Do the same for "msa_facts".

*** Count of records in "msa_facts": [ 300000-310000 ]
SQL:


Now that your tables are normalized, keyed, and indexed, you should no longer use the "msa_raw" table for any of your queries.  To prevent you from forgetting, you may want to rename the table to "DONOTUSE".  You will not get any points for queries that use this table.


PART IV: Views

This data set includes records that are summaries of other records.  For example, jobs ending in "-0000" summarize the other records that have the same prefix: "15-0000" summarizes all of the "15-****" records.  The "00-0000" records summarize all of the other records for that year.

If you ran queries without taking these summary records into account, you might end up with bogus results.

1. Create three views of your "msa_jobs" table named "msa_jobs_total", "msa_jobs_major", and "msa_jobs_detail".  Each view should include only the ID and Name columns, and only the records with the appropriate Level.  (The Detail level should include only jobs without a Level -- the detail records.)

*** Count of records in view "msa_jobs_total": [ 0-10 ]
*** Count of records in view "msa_jobs_major": [ 20-30 ]
*** Count of records in view "msa_jobs_detail": [ 750-800 ]
SQL:  (3 statements)


2. Using the "msa_jobs_detail" view as a base, inner join to the "msa_facts" table to make a new view named "msa_facts_detail" which contains only the Detail-level facts.  Fetch the unique columns from both tables (don't get two IDs).

*** Count of records in view "msa_facts_detail": [ 280000-290000 ]
SQL:


3. Build on your "msa_facts_detail" view to create a new view named "msa_facts_detail_area" view, which includes the Area Name and State.

*** Count of records in view "msa_facts_detail_area": [ 280000-290000 ]
SQL:



PART V: Aggregates, Take 1

Use your "msa_facts_detail_area" and aggregate functions to answer the following questions.  You will need to provide both the numeric answer and the SQL to find your answer.

1. How many employed people were included in the statistics for each year?

Year  Employed
====  =============
2008  [ 110M-120M ]
2009  [ 100M-110M ]

SQL:


2. Refactor your query to replace the number of employed with two new columns: the average Annual Mean salary (how much does the average American make per year?), and the total wages earned per year by all Americans (use the same Annual Mean, multiplied by the number of employed).  Divide the total wages by 1 trillion to get an easier number, and report the answer to 4 decimal places.

Year  AvgAnnual    TotalWages
====  ===========  =============
2008  [ 40K-50K ]  [ 4.7T-4.8T ]
2009  [ 40K-50K ]  [ 4.7T-4.8T ]

SQL:


3. Start a new query, still using your "msa_facts_detail_area" view.  This one will look for computer jobs (which have an ID that starts with '15') in Florida in 2009.  For each job, get the lowest, highest, and average annual mean salary.  Filter out any jobs that average less than $60K/year.  Order your results from highest to lowest average salary.

*** If the top result is rank 1, what's the rank 1 job? [ ... ]
*** What rank do Database Administrators get? [ 1-15 ]
*** What's the minimum annual salary for a DBA job? [ 50000-60000 ]

SQL:



PART VI: Subqueries

1. Your "msa_facts_detail" view uses inner joins.  Rewrite the query so that instead of joining to your "msa_jobs_detail" view, it joins your "msa_facts" table to an inline view subquery of your "msa_jobs" table that performs the same filtering.  It should return the same results as the detail view.

*** Count of records: [ 280000-290000 ]
SQL:


2. Refactor your last query to include a join to another subquery that returns only areas in Florida.

*** Count of records [ 16000-17000 ]
SQL:


3. You're going to refactor your Florida jobs query from above to use a scalar subquery.
  a. Start with your "msa_jobs" table and filter so that all of the job IDs start with '15'.
  b. Use a scalar subquery to find the average annual mean salary for each job -- this will involve joining your "msa_facts" table to your "msa_areas" table and filtering for Florida in 2009.
  c. Don't forget to join your scalar subquery back to your main table!
  d. Perform the same filtering to eliminate average salaries below $60K.
  e. Order by descending average salary.

*** Average annual salary for DBAs: [ 65000-70000 ]
SQL:



FINISHING YOUR EXAM

1. Go back through this file and search for all "***" and "SQL:" markers.  Make sure you have answers for all of them.

2. Commit your files (this text file and your graph PNG image) with the commit message "Finished exam".

3. Raise your hand and inform the Instructor that you are finished.  DO NOT PUSH UNTIL TOLD TO DO SO.

